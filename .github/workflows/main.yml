name: Build Kernel CI CHOPIN

on:
  workflow_dispatch:
  push:
jobs:
  build:
    name: Build Xiaomi CHOPIN Kernel
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev \
          g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev \
          squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven \
          libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl \
          libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev \
          libgl1-mesa-dev xsltproc unzip device-tree-compiler libelf-dev libncurses-dev

    - name: Download Toolchains
      run: |
        # Create a directory for all toolchains
        mkdir -p $GITHUB_WORKSPACE/toolchains
        cd $GITHUB_WORKSPACE/toolchains

        # Download AOSP Clang r383902 (from android11-release)
        echo "Downloading AOSP Clang..."
        mkdir clang-aosp
        wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android11-release/clang-r383902.tar.gz
        tar -C clang-aosp/ -zxf clang-r383902.tar.gz

        # Download AOSP GCC 64-bit
        echo "Downloading AOSP GCC 64-bit..."
        mkdir gcc-64
        wget -q -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
        tar -C gcc-64/ -zxf gcc-aarch64.tar.gz

        # Download AOSP GCC 32-bit
        echo "Downloading AOSP GCC 32-bit..."
        mkdir gcc-32
        wget -q -O gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
        tar -C gcc-32/ -zxf gcc-arm.tar.gz

    - name: Clone kernel source
      run: |
        # Mengubah perintah clone agar nama direktorinya konsisten
        git clone --recursive --branch zephyr --depth=1 https://github.com/topnotchfreaks/kernel_msm-5.15.git android_kernel_chopin_android_T

    - name: Build Kernel
      run: |
        # Set environment variables for the build
        export KBUILD_BUILD_USER="GitHub"
        export KBUILD_BUILD_HOST="Actions"
        export ARCH=arm64
        export PATH="$GITHUB_WORKSPACE/toolchains/clang-aosp/bin:$PATH"
        
        # Change to kernel source directory
        cd android_kernel_chopin_android_T

        # 1. (Opsional tapi direkomendasikan) Membersihkan output directory untuk memastikan build yang bersih
        #make O=out mrproper

        # 2. 【Langkah Utama】Menyiapkan konfigurasi build
        # Ini adalah langkah yang hilang dari kode Anda. Anda harus menyediakan file defconfig Anda di dalam repositori
        # atau menambahkan langkah untuk menyalinnya ke direktori kerja sebelum langkah 'make gki_defconfig'.
        # Contoh:
        # cp arch/arm64/configs/chopin_defconfig out/.config
        # make -j$(nproc) O=out ARCH=arm64 gki_defconfig

        # Perintah 'make gki_defconfig' akan mengeksekusi konfigurasi yang ada.
        make -j$(nproc) O=out \
             CC=clang \
             CLANG_TRIPLE=aarch64-linux-gnu- \
             CROSS_COMPILE="$GITHUB_WORKSPACE/toolchains/gcc-64/bin/aarch64-linux-android-" \
             CROSS_COMPILE_ARM32="$GITHUB_WORKSPACE/toolchains/gcc-32/bin/arm-linux-androideabi-" \
             LD=ld.lld \
             gki_defconfig

        # 4. Sekarang, langsung mulai kompilasi
        make -j$(nproc) O=out \
             CC=clang \
             CLANG_TRIPLE=aarch64-linux-gnu- \
             CROSS_COMPILE="$GITHUB_WORKSPACE/toolchains/gcc-64/bin/aarch64-linux-android-" \
             CROSS_COMPILE_ARM32="$GITHUB_WORKSPACE/toolchains/gcc-32/bin/arm-linux-androideabi-" \
             LD=ld.lld
             
    - name: Build Custom Kernel Module
      run: |
        # Set the same environment variables as the kernel build
        export KBUILD_BUILD_USER="GitHub"
        export KBUILD_BUILD_HOST="Actions"
        export ARCH=arm64
        export PATH="$GITHUB_WORKSPACE/toolchains/clang-aosp/bin:$PATH"

        # Build the external module
        # -C: Menunjuk ke direktori sumber kernel
        # M=: Menunjuk ke direktori sumber modul
        make -j$(nproc) -C android_kernel_chopin_android_T/out \
             M=$GITHUB_WORKSPACE/kernel \
             CC=clang \
             CLANG_TRIPLE=aarch64-linux-gnu- \
             CROSS_COMPILE="$GITHUB_WORKSPACE/toolchains/gcc-64/bin/aarch64-linux-android-" \
             CROSS_COMPILE_ARM32="$GITHUB_WORKSPACE/toolchains/gcc-32/bin/arm-linux-androideabi-" \
             LD=ld.lld \
             modules

    - name: Upload Kernel Image
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-Image-chopin
        path: android_kernel_chopin_android_T/out/arch/arm64/boot/Image.gz

    - name: Upload Kernel Module
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-Module-khack
        path: kernel/khack.ko
