name: Build Kernel CI CHOPIN

on:
  workflow_dispatch:
jobs:
  build:
    name: Build Xiaomi CHOPIN Kernel
    runs-on: ubuntu-latest

    steps:
    - name: üì¶ Checkout
      uses: actions/checkout@v4

    - name: üõ†Ô∏è Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git ccache automake flex lzop bison gperf build-essential zip curl dwarves zlib1g-dev \
          g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev \
          squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven \
          libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl \
          libxml-simple-perl bc libc6-dev-i386 libx11-dev lib32z-dev \
          libgl1-mesa-dev xsltproc unzip device-tree-compiler libelf-dev libncurses-dev aria2

    - name: ‚öôÔ∏è Setup swap 20G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 20

    - name: üìà Tune Swap
      run: |
        echo "vm.swappiness=80" | sudo tee -a /etc/sysctl.conf
        sudo sysctl -p

    - name: ‚ú® Get Toolchain
      run: |
        set -e
            
        clang_url="https://github.com/greenforce-project/greenforce_clang/releases/download/13072025/greenforce-clang-21.0.0git-13072025.tar.gz"
        echo "‚úÖ Clang URL: $clang_url"
            
        mkdir -p clang
        echo "üöÄ Downloading Greenforce Clang..."
        aria2c -x 16 -s 16 --file-allocation=none --dir=clang --out=clang.tar.gz "$clang_url" || { echo "‚ùå Failed to download Clang!"; exit 1; }
            
        echo "üì¶ Extracting Clang..."
        tar -xf clang/clang.tar.gz -C clang || { echo "‚ùå Extraction failed!"; exit 1; }
        rm -f clang/clang.tar.gz

        if [ -d "clang/bin" ]; then
          CLANG_PATH="${{ github.workspace }}/clang/bin"
        else
          CLANG_PATH=$(find clang -type d -name "bin" | head -n 1)
          CLANG_PATH="${{ github.workspace }}/${CLANG_PATH}"
        fi
            
        if [ ! -f "$CLANG_PATH/clang" ]; then
          echo "‚ùå Clang binary not found in $CLANG_PATH! Build might fail."
          ls -R clang
          exit 1
        fi
            
        echo "‚úÖ Using Clang from $CLANG_PATH"
        echo "CLANG_PATH=$CLANG_PATH" >> $GITHUB_ENV
        echo "$CLANG_PATH" >> $GITHUB_PATH
            
        export PATH="$CLANG_PATH:$PATH"
        export CLANG_TRIPLE="aarch64-linux-gnu-"
        export CC=clang
        export AR="llvm-ar"
        export AS="llvm-as"
        export NM="llvm-nm"
        export OBJCOPY="llvm-objcopy"
        export OBJDUMP="llvm-objdump"
        export STRIP="llvm-strip"
            
        echo "‚öôÔ∏è Using Clang version:"
        clang --version || echo "‚ùå Clang not found in PATH!"

    - name: üìö Clone kernel source
      run: |
        git clone --recursive --branch zephyr --depth=1 https://github.com/topnotchfreaks/kernel_msm-5.15.git

    - name: üèóÔ∏è Build Kernel
      run: |
        export KBUILD_BUILD_USER="GitHub"
        export KBUILD_BUILD_HOST="Actions"
        export ARCH=arm64
        
        cd kernel_msm-5.15

        make O=out \
            LLVM=1 \
            LTO=thin \
            -j$(nproc) \
            gki_defconfig

        make O=out \
            LLVM=1 \
            LTO=thin \
            -j$(nproc)

    - name: üì¶ Build Custom Kernel Module
      run: |
        export KBUILD_BUILD_USER="GitHub"
        export KBUILD_BUILD_HOST="Actions"
        export ARCH=arm64

        make -j$(nproc) -C kernel_msm-5.15/out \
             M=$GITHUB_WORKSPACE/kernel \
             LLVM=1 \
             LTO=thin \
             CC=clang \
             AR=llvm-ar \
             NM=llvm-nm \
             OBJCOPY=llvm-objcopy \
             OBJDUMP=llvm-objdump \
             STRIP=llvm-strip \
             modules

    - name: üì§ Upload Kernel Image
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-Image-chopin
        path: kernel_msm-5.15/out/arch/arm64/boot/Image.gz
        
    - name: üì§ Upload Kernel Module
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-Module-khack
        path: kernel/kamid.ko
